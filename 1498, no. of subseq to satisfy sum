class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int count=0;

        vector<int> pows(n, 1);
        for (int i = 1 ; i < n ; ++i)
            pows[i] = pows[i-1] * 2 % 1000000007;  
        //if pow exceeds INT_MAX, we get its modulo as only that 
        //is needed because we will always use the modulo part.

        int s=0,e=n-1; 
        //this is a 2 pointer approach here as we start from nums.
        //begin() and nums.end() and keep narrowing our sub sequence.
        //as all the minimum and maximum numbers will be at extremes,
        //no point in creating an actual subsequence.
        //we can just get away with deleting middle elements which is
        // taken care by number of ways it can be done which is power of 2 to (e-s) 
        while(s<=e)
        {
            if(nums[s]+nums[e]<=target)
            {
                count = (count + pows[e-s])%1000000007;
                s++;
            }
            else
                e--;
            
        }      
                
        

        return count%1000000007;
    }
};
