class Solution {
public:
    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& grid) {
        /* steps to solve this ques:
        we have to paint in order of arr[i]
        question needs to be solved in nlogn time complexity where m*n is 10^5
        
        step 1:
        lets make a m*n size array say at[] for location which will store the actual positions of all the m*n numbers 
        so if grid[0][0] = 4, then at[4] we will store 0*m + 0; so when we want to ask where is 4 in the grid, we will know it is at 0,0.
        alright.
        
        step 2:
        we have to make two arrays of size m and n to account for the coloured cells in all rows or columns. if it equals size, we will know that this row or column has been coloured. (this point needs more explaination ik)
        
        step 3:
        when row or column is fully coloured, return i.
        
        */
        
        int m=grid.size();
        int n=grid[0].size();
        
        vector<pair<int,int>> at(m*n+1); // +1 for one-based indexing
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                at[grid[i][j]]={i,j};
            }
        }
        
        vector<int> rows(m,0), cols(n,0);
        
         for(int i=0;i<arr.size();i++)
        {
                int k = arr[i];
                ++rows[at[k].first];
                ++cols[at[k].second];
                
                if(rows[at[k].first] == n || cols[at[k].second] == m )
                    return i;
         }
        
        return 0;   
    }
};
